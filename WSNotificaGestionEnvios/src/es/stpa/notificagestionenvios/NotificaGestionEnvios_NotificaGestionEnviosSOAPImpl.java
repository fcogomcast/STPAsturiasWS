package es.stpa.notificagestionenvios;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;

import es.stpa.notificagestionenvios.ActualizarRespuestaImpl.ResultadoActualizarRespuesta;
import es.stpa.notificagestionenvios.SincronizaEnvioImpl.RespuestaSincronizaEnvio;
import es.stpa.notificagestionenvios.exceptions.ActualizarRespuestaException;
import es.stpa.notificagestionenvios.exceptions.AltaRemesaException;
import es.stpa.notificagestionenvios.exceptions.SincronizacionEnvioException;
import es.stpa.notificagestionenvios.preferencias.Preferencias;
import es.tributasenasturias.log.ILog;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "NotificaGestionEnviosSOAP", serviceName = "NotificaGestionEnvios", targetNamespace = "http://notificagestionenvios.stpa.es", wsdlLocation = "/wsdls/NotificaGestionEnvios.wsdl", endpointInterface = "es.stpa.notificagestionenvios.NotificaGestionEnvios")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain (file="HandlerChain.xml")
public class NotificaGestionEnvios_NotificaGestionEnviosSOAPImpl implements
		NotificaGestionEnvios {

	public NotificaGestionEnvios_NotificaGestionEnviosSOAPImpl() {
	}

	@Resource WebServiceContext wContext;
	/**
	 * 
	 * @param concepto
	 * @param destRefEmisor
	 * @param destTelefono
     * @param titRazonSocial
	 * @param destApellidos
	 * @param titEmail
	 * @param codigoRespuesta
	 * @param titNombre
	 * @param codSia
	 * @param destEmail
	 * @param destRazonSocial
	 * @param codOrganismoEmisor
	 * @param tipoEnvio
	 * @param idAdar
	 * @param listaIdentificadores
	 * @param descripcionRespuesta
	 * @param titNif
	 * @param titTelefono
	 * @param destCaducidad
	 * @param destNombre
	 * @param titApellidos
	 * @param destNif
	 */
	public void altaRemesaEnvios(String codOrganismoEmisor, String idAdar,
			String tipoEnvio, String concepto, String titNif, String titNombre,
			String titApellidos, String titRazonSocial, String titTelefono, String titEmail,
			String destNif, String destNombre, String destApellidos, String destRazonSocial,
			String destTelefono, String destEmail, String destRefEmisor,
			String destCaducidad, String codSia,
			Holder<String> codigoRespuesta,
			Holder<String> descripcionRespuesta,
			Holder<ListaIdentificadoresType> listaIdentificadores) {
		ILog log=null;
		try
		{
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(Constantes.PREFERENCIAS);
			if (pref==null)
			{
				pref = new Preferencias();
			}
			log= (ILog) wContext.getMessageContext().get(Constantes.LOG);
			String idLlamada = (String) wContext.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Entrada en operación de altaRemesaEnvio");
			AltaRemesaEnviosImpl imp= new AltaRemesaEnviosImpl(pref, log, idLlamada);
			RespuestaAltaRemesaEnvios r= imp.altaRemesaEnvios(
																codOrganismoEmisor, 
																idAdar, 
																tipoEnvio, 
																concepto, 
																titNif, 
																titNombre, 
																titApellidos, 
																titRazonSocial,
																titTelefono, 
																titEmail, 
																destNif, 
																destNombre, 
																destApellidos, 
																destRazonSocial,
																destTelefono, 
																destEmail, 
																destRefEmisor, 
																destCaducidad, 
																codSia);
			codigoRespuesta.value= r.getCodigoRespuesta();
			descripcionRespuesta.value= r.getDescripcionRespuesta();
			if (r.getListaIdentificadores()!=null){
				listaIdentificadores.value= new ListaIdentificadoresType();
				for (IdentificadorType i: r.getListaIdentificadores().getIdentificador()){
					listaIdentificadores.value.getIdentificador().add(i);
				}
			}
			return;
		}
		catch (AltaRemesaException e){
			if (log!=null)
			{	
				log.error("Error en endpoint de alta de remesa de envío:" + e.getMessage());
			}

			throw new WebServiceException ("Error en endpoint de alta de remesa de envíos:"+ e.getMessage());
		}
		catch (Exception e)
		{
			if (log!=null)
			{	
				log.error("Error no controlado en endpoint de alta de remesa de envíos:" + e.getMessage());
				log.trace(e.getStackTrace());
			}

			throw new WebServiceException ("Error en endpoint de alta de remesa de envíos:"+ e.getMessage());
		}
		finally{
			if (log!=null){
				log.info("Salida de operación de alta de remesa de envíos");
			}
		}
	}
	
	/**
	 * 
	 * @param codigo
	 * @param fechaEstado
	 * @param estado
	 * @param identificador
	 * @param nombreReceptor
	 * @param modoNotificacion
	 * @param tipoEntrega
	 * @param descripcion
	 * @param vinculoReceptor
	 * @param nifReceptor
	 * @param organismoEmisor
	 * @param idArchivoAcuse
	 */
	public void sincronizarEnvio(String organismoEmisor, 
			String identificador,
			int tipoEntrega, 
			int modoNotificacion, 
			String estado,
			XMLGregorianCalendar fechaEstado, 
			String nifReceptor,
			String nombreReceptor, 
			int vinculoReceptor, 
			int idArchivoAcuse,
			Holder<String> codigo, 
			Holder<String> descripcion) {
		ILog log=null;
		try
		{
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(Constantes.PREFERENCIAS);
			if (pref==null)
			{
				pref = new Preferencias();
			}
			log= (ILog) wContext.getMessageContext().get(Constantes.LOG);
			String idLlamada = (String) wContext.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Entrada en operación de altaRemesaEnvio");
			SincronizaEnvioImpl imp= new SincronizaEnvioImpl(pref, log, idLlamada);
			RespuestaSincronizaEnvio r= imp.sincronizarEnvio(organismoEmisor, 
															  identificador, 
															  tipoEntrega, 
															  modoNotificacion, 
															  estado, 
															  fechaEstado, 
															  nifReceptor, 
															  nombreReceptor, 
															  vinculoReceptor, 
															  idArchivoAcuse);
			codigo.value= r.getCodigoRespuesta();
			descripcion.value= r.getDescripcionRespuesta();

			return;
		}
		catch (SincronizacionEnvioException e){
			if (log!=null)
			{	
				log.error("Error en endpoint de sincronizar envío:" + e.getMessage());
			}

			throw new WebServiceException ("Error en endpoint de sincronizar envío:"+ e.getMessage());
		}
		catch (Exception e)
		{
			if (log!=null)
			{	
				log.error("Error no controlado en endpoint de sincronizar envío:" + e.getMessage());
				log.trace(e.getStackTrace());
			}

			throw new WebServiceException ("Error en endpoint de sincronizar envío:"+ e.getMessage());
		}
		finally{
			if (log!=null){
				log.info("Salida de operación de sincronizar envío");
			}
		}
	}
    
    /**
	 * 
	 * @param descripcionRespuesta
	 * @param identificadorEnvio
	 * @param codigoRespuesta
	 */
	public void actualizarRespuesta(String identificadorEnvio,
			Holder<String> codigoRespuesta, Holder<String> descripcionRespuesta) {
		ILog log=null;
		try
		{
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(Constantes.PREFERENCIAS);
			if (pref==null)
			{
				pref = new Preferencias();
			}
			log= (ILog) wContext.getMessageContext().get(Constantes.LOG);
			String idLlamada = (String) wContext.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Entrada en operación de altaRemesaEnvio");
			ActualizarRespuestaImpl a= new ActualizarRespuestaImpl(pref, log, idLlamada);
			ResultadoActualizarRespuesta r= a.actualizarRespuesta(identificadorEnvio);
			codigoRespuesta.value= r.getCodigoRespuesta();
			descripcionRespuesta.value= r.getDescripcionRespuesta();
		} 
		catch (ActualizarRespuestaException are){
			if (log!=null)
			{	
				log.error("Error en endpoint de actualizar respuesta:" + are.getMessage());
			}

			codigoRespuesta.value="9999";
			descripcionRespuesta.value=are.getMessage();
		}
		catch (Exception e)
		{
			if (log!=null)
			{	
				log.error("Error no controlado en endpoint de sincronizar envío:" + e.getMessage());
				log.trace(e.getStackTrace());
			}

			throw new WebServiceException ("Error en endpoint de sincronizar envío:"+ e.getMessage());
		}
		finally{
			if (log!=null){
				log.info("Salida de operación de sincronizar envío");
			}
		}
	}
    
    /**
	 * 
	 * @param archivos
	 * @param concepto
	 * @param destRefEmisor
	 * @param destTelefono
	 * @param titRazonSocial
	 * @param destApellidos
	 * @param titEmail
	 * @param codigoRespuesta
	 * @param titNombre
	 * @param codSia
	 * @param destEmail
	 * @param destRazonSocial
	 * @param codOrganismoEmisor
	 * @param tipoEnvio
	 * @param listaIdentificadores
	 * @param descripcionRespuesta
	 * @param titNif
	 * @param titTelefono
	 * @param destCaducidad
	 * @param destNombre
	 * @param titApellidos
	 * @param destNif
	 */
	public void altaRemesaEnviosConjunto(String codOrganismoEmisor,
										 ArchivosType archivos, 
										 String tipoEnvio, 
										 String concepto,
										 String titNif, 
										 String titNombre, 
										 String titApellidos,
										 String titRazonSocial, 
										 String titTelefono, 
										 String titEmail,
										 String destNif, 
										 String destNombre, 
										 String destApellidos,
										 String destRazonSocial, 
										 String destTelefono, 
										 String destEmail,
										 String destRefEmisor, 
										 String destCaducidad, 
										 String codSia,
										 Holder<String> codigoRespuesta,
										 Holder<String> descripcionRespuesta,
										 Holder<ListaIdentificadoresType> listaIdentificadores) {

		ILog log=null;
		try
		{
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(Constantes.PREFERENCIAS);
			if (pref==null)
			{
				pref = new Preferencias();
			}
			log= (ILog) wContext.getMessageContext().get(Constantes.LOG);
			String idLlamada = (String) wContext.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Entrada en operación de altaRemesaEnvio");
			AltaRemesaEnviosConjuntoImpl imp= new AltaRemesaEnviosConjuntoImpl(pref, log, idLlamada);
			RespuestaAltaRemesaEnvios r= imp.altaRemesaEnviosConjunto(
																codOrganismoEmisor, 
																archivos, 
																tipoEnvio, 
																concepto, 
																titNif, 
																titNombre, 
																titApellidos, 
																titRazonSocial,
																titTelefono, 
																titEmail, 
																destNif, 
																destNombre, 
																destApellidos, 
																destRazonSocial,
																destTelefono, 
																destEmail, 
																destRefEmisor, 
																destCaducidad, 
																codSia);
			codigoRespuesta.value= r.getCodigoRespuesta();
			descripcionRespuesta.value= r.getDescripcionRespuesta();
			if (r.getListaIdentificadores()!=null){
				listaIdentificadores.value= new ListaIdentificadoresType();
				for (IdentificadorType i: r.getListaIdentificadores().getIdentificador()){
					listaIdentificadores.value.getIdentificador().add(i);
				}
			}
			return;
		}
		catch (AltaRemesaException e){
			if (log!=null)
			{	
				log.error("Error en endpoint de alta de remesa de envío de varios documentos:" + e.getMessage());
			}

			throw new WebServiceException ("Error en endpoint de alta de remesa de envíos de varios documentos:"+ e.getMessage());
		}
		catch (Exception e)
		{
			if (log!=null)
			{	
				log.error("Error no controlado en endpoint de alta de remesa de envíos de varios documentos:" + e.getMessage());
				log.trace(e.getStackTrace());
			}

			throw new WebServiceException ("Error en endpoint de alta de remesa de envíos de varios documentos:"+ e.getMessage());
		}
		finally{
			if (log!=null){
				log.info("Salida de operación de alta de remesa de envíos de varios documentos");
			}
		}
	}

}
