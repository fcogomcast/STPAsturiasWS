package es.tributasenasturias.ades;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import es.tributasenasturias.ades.exceptions.PadesException;
import es.tributasenasturias.ades.exceptions.XadesException;
import es.tributasenasturias.ades.pades.PadesSigner;
import es.tributasenasturias.ades.preferencias.Preferencias;
import es.tributasenasturias.ades.soap.SOAPUtils;
import es.tributasenasturias.ades.xades.XadesSigner;
import es.tributasenasturias.log.ILog;
import es.tributasenasturias.log.TributasLogger;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "FirmasAdesSOAP", serviceName = "FirmasAdes", targetNamespace = "http://www.tributasenasturias.es/servicios/FirmasAdes/", wsdlLocation = "/wsdls/FirmasAdes.wsdl", endpointInterface = "es.tributasenasturias.ades.FirmasAdes")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain(file="HandlerChain.xml")
public class FirmasAdes_FirmasAdesSOAPImpl implements FirmasAdes {

	@Resource
	WebServiceContext context;
	public FirmasAdes_FirmasAdesSOAPImpl() {
	}

	/**
	 * Realiza la firma según Xades
	 * @param datosFirma 
	 * @param documentoOut
	 * @param resultado
	 * @param documento
	 */
	public void firmaXades(DocumentoXadesInType documento,
			DatosFirmaXadesType datosFirma, Holder<ResultadoType> resultado,
			Holder<DocumentoXadesOutType> documentoOut) {
		Preferencias pref;
		String idLlamada;
		ILog log=null;
		ResultadoType resOut= new ResultadoType();
		DocumentoXadesOutType docOut= new DocumentoXadesOutType();
		try{
			MessageContext mc = context.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				log = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				log = new TributasLogger(pref.getModoLog(),pref.getFicheroLogAplicacion(), idLlamada);
			}
			log.info("Inicio de la firma Xades con formato firma:" +
					(datosFirma.getFormatoXades()!=null?datosFirma.getFormatoXades().value():"desconocida ") + 
					" , Modo Firma:" + 
					(datosFirma.getModoFirma()!=null ? datosFirma.getModoFirma().value():"desconocida") + 
					" ,Algoritmo:" + 
					(datosFirma.getAlgoritmoHash()!=null?datosFirma.getAlgoritmoHash().value():"desconocido"));
			XadesSigner signer= XadesSigner.newInstance(pref, log, idLlamada);
			byte[] documentoFirmado= signer.procesaFirma(documento.getBase64XML(), datosFirma.getModoFirma(), datosFirma.getFormatoXades(), datosFirma.getAlgoritmoHash(), datosFirma.getPoliticaFirma(), datosFirma.getIdNodoAFirmar(), datosFirma.getXPathNodoContenedorFirma());
			resOut.setCodigo("0000");
			resOut.setDescripcion("Firma realizada correctamente");
			resOut.setEsError(false);
			docOut.setBase64XML(documentoFirmado);
			resultado.value=resOut;
			documentoOut.value=docOut;
		}  catch (XadesException xades){
			if (log!=null){
				log.error("Error en firma:" + xades.getMessage(),xades);
			}
			resOut.setCodigo("0100");
			resOut.setDescripcion(xades.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		}  catch (Exception e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} catch (Throwable e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} finally{
			if (log!=null) {
				log.info("Fin de la firma Xades");
			}
		}
		return;
	}

	/**
	 * 
	 * @param datosFirma
	 * @param documentoOut
	 * @param resultado
	 * @param documento
	 */
	public void firmaPades(DocumentoPadesInType documento,
			DatosFirmaPadesType datosFirma, Holder<ResultadoType> resultado,
			Holder<DocumentoPadesOutType> documentoOut) {
		Preferencias pref;
		String idLlamada;
		ILog log=null;
		ResultadoType resOut= new ResultadoType();
		DocumentoPadesOutType docOut= new DocumentoPadesOutType();
		try{
			MessageContext mc = context.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				log = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				log = new TributasLogger(pref.getModoLog(),pref.getFicheroLogAplicacion(), idLlamada);
			}
			log.info("Inicio de la firma Pades con formato firma:" +
					datosFirma.getFormatoPades()!=null? datosFirma.getFormatoPades().value(): "desconocida" + 
					" ,Algoritmo:" + 
					datosFirma.getAlgoritmoHash()!=null?datosFirma.getAlgoritmoHash().value():"desconocida");
			PadesSigner signer= PadesSigner.newInstance(pref, log, idLlamada);
			byte[] documentoFirmado= signer.procesaFirma(documento.getBase64Pdf(), datosFirma.getFormatoPades(), datosFirma.getAlgoritmoHash(), datosFirma.getPoliticaFirma());
			resOut.setCodigo("0000");
			resOut.setDescripcion("Firma realizada correctamente");
			resOut.setEsError(false);
			docOut.setBase64Pdf(documentoFirmado);
			resultado.value=resOut;
			documentoOut.value=docOut;
		}  catch (PadesException pades){
			if (log!=null){
				log.error("Error en firma:" + pades.getMessage(),pades);
			}
			resOut.setCodigo("0100");
			resOut.setDescripcion(pades.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		}  catch (Exception e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} catch (Throwable e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} finally {
			if (log!=null) {
				log.info("Fin firma Pades");
			}
		}
		return;
	}

	/* INIPETITRIBUTAS-5 ENAVARRO ** 01/04/2020 ** Compulsa */
    /**
     * Se envia un pdf con una firma a la que se le habilitará el LTV
     * @param datosFirma
     * @param documento0
     * @param resultado
     * @param documento
     */
    public void upgradeFirmaPades(DocumentoPadesInType documento, DatosFirmaPadesType datosFirma, Holder<ResultadoType> resultado, Holder<DocumentoPadesOutType> documento0) {
    	Preferencias pref;
		String idLlamada;
		ILog log=null;
		ResultadoType resOut= new ResultadoType();
		DocumentoPadesOutType docOut= new DocumentoPadesOutType();
		try{
			MessageContext mc = context.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				log = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				log = new TributasLogger(pref.getModoLog(),pref.getFicheroLogAplicacion(), idLlamada);
			}
			log.info("Inicio de la firma Pades con formato firma:" +
					datosFirma.getFormatoPades()!=null? datosFirma.getFormatoPades().value(): "desconocida" + 
					" ,Algoritmo:" + 
					datosFirma.getAlgoritmoHash()!=null?datosFirma.getAlgoritmoHash().value():"desconocida");
			PadesSigner signer= PadesSigner.newInstance(pref, log, idLlamada);
			byte[] documentoFirmado= signer.procesaFirmaUpgrade(documento.getBase64Pdf(), datosFirma.getFormatoPades(), datosFirma.getAlgoritmoHash(), datosFirma.getPoliticaFirma());
			resOut.setCodigo("0000");
			resOut.setDescripcion("Firma realizada correctamente");
			resOut.setEsError(false);
			docOut.setBase64Pdf(documentoFirmado);
			resultado.value=resOut;
			documento0.value=docOut;
		}  catch (PadesException pades){
			if (log!=null){
				log.error("Error en firma:" + pades.getMessage(),pades);
			}
			resOut.setCodigo("0100");
			resOut.setDescripcion(pades.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		}  catch (Exception e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} catch (Throwable e){
			if (log!=null) {
				log.error ("Error inesperado:" + e.getMessage(),e);
				log.trace(e.getStackTrace());
			}
			resOut.setCodigo("9999");
			resOut.setDescripcion("Error inesperado:"+e.getMessage());
			resOut.setEsError(true);
			resultado.value=resOut;
		} finally {
			if (log!=null) {
				log.info("Fin firma Pades");
			}
		}
		return;
    }
    /* FINPETITRIBUTAS-5 ENAVARRO ** 01/04/2020 ** Compulsa */
}
