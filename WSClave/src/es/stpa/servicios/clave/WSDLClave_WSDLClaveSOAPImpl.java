package es.stpa.servicios.clave;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;

import es.stpa.servicios.clave.exceptions.ProcesoException;
import es.stpa.servicios.clave.log.ILog;
import es.stpa.servicios.clave.preferencias.Preferencias;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "WSDLClaveSOAP", serviceName = "WSDLClave", targetNamespace = "http://servicios.tributasenasturias.es/WSDLClave/", wsdlLocation = "/wsdls/WSDLClave.wsdl", endpointInterface = "es.stpa.servicios.clave.WSDLClave")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain(file="HandlerChain.xml")
public class WSDLClave_WSDLClaveSOAPImpl implements WSDLClave {

	@Resource
	 WebServiceContext wsc;
	
	public WSDLClave_WSDLClaveSOAPImpl() {
	}

	/**
	 * 
	 * @param peticionOriginal
	 * @param resultado
	 * @param peticion
	 * @param esError
	 * @param mensajeError
	 */
	public void generarTicket(PeticionGeneracionType peticion, Holder<Boolean> esError,
			Holder<String> mensajeError, 
            Holder<PeticionGeneracionType> peticionOriginal,
            Holder<ResultadoGeneracionType> resultado) {

		ILog log=null;
		try {
			Preferencias pr= (Preferencias)wsc.getMessageContext().get(Constantes.PREFERENCIAS);
			log= (ILog) wsc.getMessageContext().get(Constantes.LOG);
			String idLlamada= (String) wsc.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Inicio de operación de generación de ticket");
			GeneradorTickets.ResultadoGeneracion r = new GeneradorTickets(pr, log, idLlamada).generarTicket(peticion);
			esError.value= r.esError();
			mensajeError.value=r.getMensajeError();
			peticionOriginal.value= peticion;
			resultado.value= r.getResultado();
		} catch (ProcesoException pe){
			log.error ("Error controlado de proceso:"+pe.getMessage(),pe);
			esError.value=true;
			mensajeError.value=pe.getMessage();
		}
		catch (Exception e) {
			if (log!=null){
				log.error(e.getMessage(),e);
			}
			throw new WebServiceException("Error en "+this.getClass().getCanonicalName()+":"+e.getMessage(),e);
		}
		finally {
			if (log!=null){
				log.info("Fin de operación de generación de ticket");
			}
		}
		return;
	}

	/**
	 * Proceso de un token SAML o Token logout
	 * @param samlToken
	 * @param datosRespuesta
	 * @param esError
	 * @param peticionGeneracionOriginal
	 * @param mensajeError
	 * @param ipCliente
	 * @param logoutResponse
	 */
	public void procesarRespuesta(String samlToken, String logoutResponse,
			String ipCliente,
			PeticionGeneracionType peticionGeneracionOriginal,
			Holder<Boolean> esError, Holder<String> mensajeError,
			Holder<DatosRespuestaType> datosRespuesta) {
		ILog log=null;
		try {
			Preferencias pr= (Preferencias)wsc.getMessageContext().get(Constantes.PREFERENCIAS);
			log= (ILog) wsc.getMessageContext().get(Constantes.LOG);
			String idLlamada= (String) wsc.getMessageContext().get(Constantes.IDLLAMADA);
			log.info("Inicio de operación de proceso de token");
			GestorRespuesta.DatosRespuesta r = new GestorRespuesta(pr, log, idLlamada).procesarRespuesta(samlToken, logoutResponse, peticionGeneracionOriginal, ipCliente);
			esError.value= r.esError();
			mensajeError.value=r.getMensajeError();
			datosRespuesta.value= r.getDatos();
		} catch (ProcesoException pe){
			log.error("Error controlado de proceso:"+pe.getMessage(),pe);
			esError.value=true;
			mensajeError.value=pe.getMessage();
		}
		catch (Exception e) {
			if (log!=null){
				log.error(e.getMessage(),e);
			}
			throw new WebServiceException("Error en "+this.getClass().getCanonicalName()+":"+e.getMessage(),e);
		}
		finally {
			if (log!=null){
				log.info("Fin de operación de proceso de token");
			}
		}
		return;
	}

}
