package es.tributasenasturias.servicios.accesocertificado;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;

import es.tributasenasturias.servicios.accesocertificado.contextoLlamadas.CallContext;
import es.tributasenasturias.servicios.accesocertificado.contextoLlamadas.CallContextConstants;
import es.tributasenasturias.servicios.accesocertificado.contextoLlamadas.CallContextManager;
import es.tributasenasturias.servicios.accesocertificado.exceptions.STPAException;
import es.tributasenasturias.servicios.accesocertificado.log.LogFactory;
import es.tributasenasturias.servicios.accesocertificado.preferencias.Preferencias;
import es.tributasenasturias.servicios.accesocertificado.preferencias.PreferenciasFactory;
import es.tributasenasturias.servicios.accesocertificado.utils.Util;
import es.tributasenasturias.utils.log.Logger;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "AccesoPorCertificado", serviceName = "AccesoPorCertificado", targetNamespace = "http://accesoCertificado.servicios.tributasenasturias.es/AccesoPorCertificado/", wsdlLocation = "/wsdls/wsdlAccesoPorCertificado.wsdl", endpointInterface = "es.tributasenasturias.servicios.accesocertificado.AccesoPorCertificado")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain(file="HandlerChain.xml")
public class AccesoPorCertificado_AccesoPorCertificadoImpl implements
		AccesoPorCertificado {

	@Resource WebServiceContext wcontext;
	public AccesoPorCertificado_AccesoPorCertificadoImpl() {
	}

	/**
	 * 
	 * @param request
	 * @return returns
	 *         es.tributasenasturias.servicios.accesocertificado.RecuperarUsuarioTributasResponse
	 */
	public RecuperarUsuarioTributasResponse recuperarUsuarioTributas(
			RecuperarUsuarioTributasRequest request) {
		RecuperarUsuarioTributasResponse response;
		Logger log=null;
		try
		{
			CallContext context=CallContextManager.newCallContext();
			//Recuperamos de contexto de llamada los objetos. Si alguno no existe, lo construimos.
			Preferencias prefs;
			prefs = (Preferencias) wcontext.getMessageContext().get(CallContextConstants.PREFERENCIAS);
			if (prefs==null)
			{
				prefs = PreferenciasFactory.newInstance();
			}
			String idLlamada="";
			idLlamada = (String) wcontext.getMessageContext().get(CallContextConstants.IDSESION);
			if (idLlamada==null)
			{
				idLlamada = Util.getIdLlamada();
			}
			log = LogFactory.newLogger(prefs.getModoLog(), prefs.getFicheroLogAplicacion(),"Sesion:"+ idLlamada);
			context.setItem(CallContextConstants.PREFERENCIAS, prefs);
			context.setItem(CallContextConstants.LOG, log);
			context.setItem(CallContextConstants.IDSESION, idLlamada);
			ProcesadorRecuperacionUsuario process = ProcesadorFactory.newRecuperacionUsuario(context);
			response  = process.recuperarUsuarioTributas(request);
		}
		catch (STPAException e)
		{
			if (log!=null)
			{
				log.error("Error en el servicio de Acceso por Certificado:" + e.getMessage());
			}
			else
			{
				System.err.println ("[WSAccesoPorCertificado]Error en el servicio de Acceso por Certificado:" + e.getMessage());
			}
			if (e.getMensajeCliente()!=null)
			{
				throw new WebServiceException ("Error en el servicio de Acceso por Certificado:" + e.getMensajeCliente());
			}
			else
			{
				throw new WebServiceException ("Error en el servicio de Acceso por Certificado.");
			}
		}
		catch (Exception e)
		{
			if (log!=null)
			{
				log.error("Error inesperado en el servicio de Acceso por Certificado:" + e.getMessage());
			}
			else
			{
				System.err.println ("[WSAccesoPorCertificado]Error inesperado en el servicio de Acceso Por Certificado:" + e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Acceso por Certificado.");
		}
		return response;
	}

	/**
	 * 
	 * @param request
	 * @return returns
	 *         es.tributasenasturias.servicios.accesocertificado.ConfirmarAccesoPorCertificadoResponse
	 */
	public ConfirmarAccesoPorCertificadoResponse confirmarAccesoPorCertificado(
			ConfirmarAccesoPorCertificadoRequest request) {
		Logger log=null;
		try
		{
			CallContext context=CallContextManager.newCallContext();
			//Recuperamos de contexto de llamada los objetos. Si alguno no existe, lo construimos.
			Preferencias prefs;
			prefs = (Preferencias) wcontext.getMessageContext().get(CallContextConstants.PREFERENCIAS);
			if (prefs==null)
			{
				prefs = PreferenciasFactory.newInstance();
			}
			String idLlamada="";
			idLlamada = (String) wcontext.getMessageContext().get(CallContextConstants.IDSESION);
			if (idLlamada==null)
			{
				idLlamada = Util.getIdLlamada();
			}
			log = LogFactory.newLogger(prefs.getModoLog(), prefs.getFicheroLogAplicacion(),"Sesion:"+ idLlamada);
			context.setItem(CallContextConstants.PREFERENCIAS, prefs);
			context.setItem(CallContextConstants.LOG, log);
			context.setItem(CallContextConstants.IDSESION, idLlamada);
			ProcesadorConfirmacionAcceso process = ProcesadorFactory.newConfirmacionAcceso(context);
			return process.process(request);
		}
		catch (STPAException e)
		{
			if (log!=null)
			{
				log.error("Error en el servicio de Confirmación de Acceso:" + e.getMessage());
			}
			else
			{
				System.err.println ("[WSAccesoPorCertificado]Error en el servicio de Confirmación de Acceso:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Confirmación de Acceso.");
		}
		catch (Exception e)
		{
			if (log!=null)
			{
				log.error("Error inesperado en el servicio de Confirmación de Acceso:" + e.getMessage());
			}
			else
			{
				System.err.println("[WSAccesoPorCertificado]Error en el servicio de Confirmación de Acceso:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Confirmación de Acceso.");
		}
	}

	/**
	 * 
	 * @param request
	 * @return returns
	 *         es.tributasenasturias.servicios.accesocertificado.ListarCertificadosConAccesoResponse
	 */
	public ListarCertificadosConAccesoResponse listarCertificadosConAcceso(
			ListarCertificadosConAccesoRequest request) {
		Logger log=null;
		try
		{
			CallContext context=CallContextManager.newCallContext();
			//Recuperamos de contexto de llamada los objetos. Si alguno no existe, lo construimos.
			Preferencias prefs;
			prefs = (Preferencias) wcontext.getMessageContext().get(CallContextConstants.PREFERENCIAS);
			if (prefs==null)
			{
				prefs = PreferenciasFactory.newInstance();
			}
			String idLlamada="";
			idLlamada = (String) wcontext.getMessageContext().get(CallContextConstants.IDSESION);
			if (idLlamada==null)
			{
				idLlamada = Util.getIdLlamada();
			}
			log = LogFactory.newLogger(prefs.getModoLog(), prefs.getFicheroLogAplicacion(),"Sesion:"+ idLlamada);
			context.setItem(CallContextConstants.PREFERENCIAS, prefs);
			context.setItem(CallContextConstants.LOG, log);
			context.setItem(CallContextConstants.IDSESION, idLlamada);
			ProcesadorListadoCertificados process = ProcesadorFactory.newListadoCertificados(context);
			return process.process(request);
		}
		catch (STPAException e)
		{
			if (log!=null)
			{
				log.error("Error en el servicio de Listado de certificados:" + e.getMessage());
			}
			else
			{
				System.err.println ("[WSAccesoPorCertificado]Error en el servicio de Listado de Certificados:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Listado de Certificados.");
		}
		catch (Exception e)
		{
			if (log!=null)
			{
				log.error("Error inesperado en el servicio de Listado de Certificados:" + e.getMessage());
			}
			else
			{
				System.err.println("[WSAccesoPorCertificado]Error en el servicio de Listado de Certificados:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Listado de Certificados.");
		}
	}
	/**
	 * 
	 * 
	 * @param dnCertificado
	 * @param certificado
	 * @param usuario
	 * @param password
	 * @param resultado
	 * @param esError
	 */
	public void asociarCertificadoUsuarioTributas(String certificado,
			String dnCertificado, String usuario, String password,
			Holder<Boolean> esError, Holder<ResultadoAsociacionType> resultado) {
		
		Logger log=null;
		try
		{
			CallContext context=CallContextManager.newCallContext();
			//Recuperamos de contexto de llamada los objetos. Si alguno no existe, lo construimos.
			Preferencias prefs;
			prefs = (Preferencias) wcontext.getMessageContext().get(CallContextConstants.PREFERENCIAS);
			if (prefs==null)
			{
				prefs = PreferenciasFactory.newInstance();
			}
			String idLlamada="";
			idLlamada = (String) wcontext.getMessageContext().get(CallContextConstants.IDSESION);
			if (idLlamada==null)
			{
				idLlamada = Util.getIdLlamada();
			}
			log = LogFactory.newLogger(prefs.getModoLog(), prefs.getFicheroLogAplicacion(),"Sesion:"+ idLlamada);
			context.setItem(CallContextConstants.PREFERENCIAS, prefs);
			context.setItem(CallContextConstants.LOG, log);
			context.setItem(CallContextConstants.IDSESION, idLlamada);
			ProcesadorAsociarCertificadoUsuario procesador = ProcesadorFactory.newAsociarCertificadoUsuario(context);
			procesador.process(certificado, dnCertificado, usuario, password, esError, resultado);
			return;
		}
		catch (STPAException e)
		{
			if (log!=null)
			{
				log.error("Error en el servicio de Asociación de usuario a Certificado:" + e.getMessage());
			}
			else
			{
				System.err.println ("[WSAccesoPorCertificado]Error en el servicio de Asociación de usuario a Certificado:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Asociación de usuario a Certificado.");
		}
		catch (Exception e)
		{
			if (log!=null)
			{
				log.error("Error inesperado en el servicio de Asociación de usuario a Certificado:" + e.getMessage());
			}
			else
			{
				System.err.println("[WSAccesoPorCertificado]Error en el servicio de Asociación de usuario a Certificado:"+ e.getMessage());
			}
			throw new WebServiceException ("Error en el servicio de Asociación de usuario a Certificado.");
		}
	}

}