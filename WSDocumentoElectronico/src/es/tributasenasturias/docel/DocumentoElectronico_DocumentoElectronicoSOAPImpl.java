
package es.tributasenasturias.docel;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;

import javax.jws.WebService;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import es.tributasenasturias.docel.DocumentoElectronicoImp.ResultadoConsultaDocumento;
import es.tributasenasturias.docel.MetadatosMinimosENIType.Organos;
import es.tributasenasturias.docel.exceptions.DocumentoElectronicoException;
import es.tributasenasturias.docel.preferencias.Preferencias;
import es.tributasenasturias.docel.soap.SOAPUtils;
import es.tributasenasturias.log.ILog;
import es.tributasenasturias.log.TributasLogger;

/**
 * This class was generated by the JAX-WS RI.
 * Oracle JAX-WS 2.1.3-06/19/2008 07:03 PM(bt)
 * Generated source version: 2.1
 * 
 */
@WebService(portName = "DocumentoElectronicoSOAP", serviceName = "DocumentoElectronico", targetNamespace = "http://docel.tributasenasturias.es/servicios/DocumentoElectronico/", wsdlLocation = "/wsdls/DocumentoElectronico.wsdl", endpointInterface = "es.tributasenasturias.docel.DocumentoElectronico")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain(file="HandlerChain.xml")
public class DocumentoElectronico_DocumentoElectronicoSOAPImpl implements
		DocumentoElectronico {

	@Resource
	WebServiceContext wc;	

    public DocumentoElectronico_DocumentoElectronicoSOAPImpl() {
    }

    /**
     * 
     * @param accionesGeneracion
     * @param trazabilidad
     * @param documento
     * @param metadatos
     * @return
     *     returns es.tributasenasturias.docel.ResultadoGenerarType
     */
    public ResultadoGenerarType generarDocumento(DocumentoType documento, AccionesGeneracionDocumentoType accionesGeneracion, 
    		MetadatosDocumentoType metadatos, TrazabilidadType trazabilidad) {
        es.tributasenasturias.docel.preferencias.Preferencias pref;
		String idLlamada;
		ILog logger=null;
		ResultadoGenerarType resultado= new ResultadoGenerarType();
		try 
		{
			MessageContext mc = wc.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				logger = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				logger= new TributasLogger(pref.getModoLog(), pref.getFicheroLogAplicacion());
			}
			logger.info("Inicio de la petición de generación de documento electrónico");
			DocumentoElectronicoImp im= DocumentoElectronicoImp.newInstance(pref, logger, idLlamada);
			im.generarDocumento(documento, accionesGeneracion, metadatos, trazabilidad, resultado);
			
		} catch (DocumentoElectronicoException d) {
			logger.error("Error en generación de documento:"+ d.getMessage(), d);
			resultado.setCodigo("0100");
			resultado.setMensaje(d.getMessage());
			resultado.setEsError(true);
		} catch (Exception ex){
			if (logger!=null) {
				logger.error("Error inesperado:" + ex.getMessage(),ex);
			}
			resultado.setCodigo("0999");
			resultado.setEsError(true);
			resultado.setMensaje(ex.getMessage());
		} finally {
			if (logger!=null)
			{
				logger.info("Fin de la petición de generacion de documento electrónico");
			}
		}
		return resultado;
    }

    /**
     * 
     * @param codigoResultado
     * @param idDocumentoElectronico
     * @param contenido
     * @param usuarioConsulta
     * @param metadatosComplementariosENI
     * @param mensajeResultado
     * @param esError
     * @param funcionResumen
     * @param obtenerContenidoDocumento
     * @param metadatosMinimosENI
     * @param valorHuella
     */
    public void consultaDocumento(int idDocumentoElectronico, String usuarioConsulta, String obtenerContenidoDocumento, 
    		Holder<Boolean> esError, Holder<String> codigoResultado, Holder<String> mensajeResultado, Holder<byte[]> contenido, 
    		Holder<String> valorHuella, Holder<String> funcionResumen, Holder<MetadatosMinimosENIType> metadatosMinimosENI, 
    		Holder<MetadatosComplementariosENIType> metadatosComplementariosENI) {
        es.tributasenasturias.docel.preferencias.Preferencias pref;
		String idLlamada;
		ILog logger=null;
		try 
		{
			MessageContext mc = wc.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				logger = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				logger= new TributasLogger(pref.getModoLog(), pref.getFicheroLogAplicacion());
			}
			logger.info("Inicio de la petición de consulta de documento electrónico");
			DocumentoElectronicoImp imp= DocumentoElectronicoImp.newInstance(pref, logger, idLlamada);
			ResultadoConsultaDocumento rc= imp.consultaDocumento(idDocumentoElectronico, usuarioConsulta, obtenerContenidoDocumento);
			contenido.value= rc.getContenido();
			metadatosMinimosENI.value= new MetadatosMinimosENIType();
			metadatosMinimosENI.value.setIdentificador(rc.getIdentificadorENI());
			metadatosMinimosENI.value.setNombreFormato(rc.getNombreFormato());
			metadatosMinimosENI.value.setVersionNTI(rc.getVersionNTI());
			Organos org= new Organos();
			org.getOrgano().add(rc.getOrgano());
			metadatosMinimosENI.value.setOrganos(org);
			
			metadatosMinimosENI.value.setFechaCaptura(getFechaXML(rc.getFechaCaptura()));
			metadatosMinimosENI.value.setOrigen(rc.getOrigen());
			metadatosMinimosENI.value.setEstadoElaboracion(rc.getEstadoElaboracion());
			metadatosMinimosENI.value.setIdentificadorDocumentoOrigen(rc.getIdentificadorDocumentoOrigen());
			metadatosMinimosENI.value.setTipoDocumental(rc.getTipoDocumental());
			metadatosComplementariosENI.value= new MetadatosComplementariosENIType();
			metadatosComplementariosENI.value.setNombreNatural(rc.getNombreNatural());
			metadatosComplementariosENI.value.setDescripcion(rc.getDescripcion());
			
			valorHuella.value = rc.getValorHuella();
			funcionResumen.value= rc.getFuncionResumen();
			
			
			//Firma
			TiposFirmaComplexType firmas= mapTiposFirma(rc);
			metadatosMinimosENI.value.setTiposFirma(firmas);
		}catch (DocumentoElectronicoException d) {
			logger.error("Error en consulta de documento:"+ d.getMessage(), d);
			codigoResultado.value="0100";
			mensajeResultado.value=d.getMessage();
			esError.value=true;
		} catch (Exception e) {
			if (logger!=null) {
				logger.error("Error inesperado:" + e.getMessage(),e);
			}
			codigoResultado.value="0999";
			esError.value=true;
			mensajeResultado.value=e.getMessage();
		}
		finally {
			if (logger!=null)
			{
				logger.info("Fin de la petición de consulta de documento electrónico");
			}
	}
    }

    /* INIPETITRIBUTAS-60 ENAVARRO ** 10/06/2020 ** Act. FOLE. Generación de expdte en formato XML */
    /**
     * 
     * @param error
     * @param usuario
     * @param salida
     * @param datosDocumento
     */
    public void generarTodosDocumentos(String usuario, List<DatosDocumentoType> datosDocumento, Holder<String> salida, Holder<String> error) {
    	es.tributasenasturias.docel.preferencias.Preferencias pref;
		String idLlamada;
		ILog logger=null;
		try 
		{
			MessageContext mc = wc.getMessageContext();
			
			if (mc.containsKey(Constantes.PREFERENCIAS))
			{
				pref = (Preferencias) mc.get(Constantes.PREFERENCIAS);
			}
			else
			{
				pref = new Preferencias();
			}
			if (mc.containsKey(Constantes.IDSESION))
			{
				idLlamada= (String) mc.get(Constantes.IDSESION);
			}
			else
			{
				idLlamada= SOAPUtils.getIdLlamada();
			}
			if (mc.containsKey(Constantes.LOG))
			{
				logger = (ILog) mc.get(Constantes.LOG);
			}
			else 
			{
				logger= new TributasLogger(pref.getModoLog(), pref.getFicheroLogAplicacion());
			}
			logger.info("Inicio de la petición de generación de documento electrónico");
			DocumentoElectronicoImp im= DocumentoElectronicoImp.newInstance(pref, logger, idLlamada);
			im.generarTodosDocumentos(usuario, datosDocumento, salida, error);			
		} catch (DocumentoElectronicoException d) {
			logger.error("Error en generación de los documentso:"+ d.getMessage(), d);
			error.value = "Error en generación de los documentos:" + d.getMessage();
		} catch (Exception ex){
			if (logger!=null) {
				logger.error("Error inesperado:" + ex.getMessage(),ex);
			}
			error.value = "Error inesperado:" + ex.getMessage();
		} finally {
			if (logger!=null)
			{
				logger.info("Fin de la petición de generacion de todos los documentos electrónicos");
				
			}
		}
    }
    /* FINPETITRIBUTAS-60 ENAVARRO ** 10/06/2020 ** Act. FOLE. Generación de expdte en formato XML */

	/**
	 * Devuelva la relación de tipos de firma en función del resultado de consulta
	 * @param rc
	 * @return @List<TiposFirmaComplexType>
	 */
	private TiposFirmaComplexType mapTiposFirma(ResultadoConsultaDocumento rc)
	{
		String tipoFirma= rc.getTipoFirma();
		String TIPO_PAdES= "PAdES";
		TiposFirmaComplexType tipo= new TiposFirmaComplexType();
		List<TFirmaType> firmas = tipo.getFirma();
		TFirmaType firma = new TFirmaType();
		if ("CSV".equals(tipoFirma))
		{
			firma.setTipoFirma("CSV");
			firma.setValorCSV(rc.getCsv());
			firma.setDefinicionCSV(rc.getDefinicionCsv());
			firmas.add(firma);
		} else if ("CI".equals(tipoFirma))
		{
			firma.setTipoFirma(TIPO_PAdES);
			firmas.add(firma);
		} else if ("FE".equals(tipoFirma))
		{
			firma.setTipoFirma(TIPO_PAdES); //Suponemos esta
			firmas.add(firma);
		} else if ("CSVCI".equals(tipoFirma))
		{
			firma.setTipoFirma("CSV");
			firma.setValorCSV(rc.getCsv());
			firma.setDefinicionCSV(rc.getDefinicionCsv());
			firmas.add(firma);
			firma = new TFirmaType();
			firma.setTipoFirma(TIPO_PAdES);
			firmas.add(firma);
			
		}
		return tipo;
}
	/**
	 * Devuelve una fecha que se puede utilizar en la vuelta del servicio, basada 
	 * en una cadena DD/MM/YYYY HH24:MI:SS
	 * @param fechaHora Fecha y hora en formato DD/MM/YYYY HH24:MI:SS
	 * @return  {@link XMLGregorianCalendar}
	 * @throws DocumentoElectronicoException
	 */
	private XMLGregorianCalendar getFechaXML(String fechaHora)  throws DocumentoElectronicoException{
		try {
			SimpleDateFormat sd= new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			GregorianCalendar g= new GregorianCalendar();
			g.setTime(sd.parse(fechaHora));
			XMLGregorianCalendar xcal= DatatypeFactory.newInstance().newXMLGregorianCalendar(g);
			return xcal;
		} catch (ParseException pe){
			throw new DocumentoElectronicoException("Error al intepretar la fecha:" + fechaHora);
		}  catch (DatatypeConfigurationException dt) {
			throw new DocumentoElectronicoException( "Error al interpretar la fecha:" + fechaHora);
		}
	}
}