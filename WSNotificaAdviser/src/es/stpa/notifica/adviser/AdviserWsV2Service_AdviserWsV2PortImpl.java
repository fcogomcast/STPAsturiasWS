package es.stpa.notifica.adviser;

import java.math.BigInteger;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;

import es.stpa.notifica.adviser.exceptions.AdviserException;
import es.stpa.notifica.adviser.preferencias.Preferencias;
import es.tributasenasturias.log.ILog;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "AdviserWsV2Port", serviceName = "AdviserWsV2Service", targetNamespace = "http://administracionelectronica.gob.es/notifica/ws/adviserwsv2/1.0/", wsdlLocation = "/wsdls/WSDLAdviser.wsdl", endpointInterface = "es.stpa.notifica.adviser.AdviserWsV2PortType")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain (file="HandlerChain.xml")
public class AdviserWsV2Service_AdviserWsV2PortImpl implements
		AdviserWsV2PortType {

	public AdviserWsV2Service_AdviserWsV2PortImpl() {
	}
	
	@Resource WebServiceContext wContext;
	/**
	 * Operación que se invocará desde Notific@ para comunicarnos los datados y certificaciones de los envíos
	 * @param fechaEstado
	 * @param tipoEntrega
	 * @param opcionesResultadoSincronizarEnvio
	 * @param acusePDF
	 * @param codigoRespuesta
	 * @param estado
	 * @param descripcionRespuesta
	 * @param identificador
	 * @param receptor
	 * @param opcionesSincronizarEnvio
	 * @param modoNotificacion
	 * @param acuseXML
	 * @param organismoEmisor
	 */
	public void sincronizarEnvio(String organismoEmisor,
			Holder<String> identificador, BigInteger tipoEntrega,
			BigInteger modoNotificacion, String estado,
			XMLGregorianCalendar fechaEstado, Receptor receptor,
			Acuse acusePDF, Acuse acuseXML, Opciones opcionesSincronizarEnvio,
			Holder<String> codigoRespuesta,
			Holder<String> descripcionRespuesta,
			Holder<Opciones> opcionesResultadoSincronizarEnvio) {
		ILog log=null;
		try
		{
			Preferencias pref= (Preferencias) wContext.getMessageContext().get(Constantes.PREFERENCIAS);
			if (pref==null)
			{
				pref = new Preferencias();
			}
			log= (ILog) wContext.getMessageContext().get(Constantes.LOG);
			String idLlamada = (String) wContext.getMessageContext().get(Constantes.IDSESION);
			Boolean errorSeguridad= (Boolean)wContext.getMessageContext().get(Constantes.ERROR_SEGURIDAD);
			log.info("Entrada en operación de sincronizarEnvio");
			if (!errorSeguridad){
				AdviserImpl imp = new AdviserImpl(pref,log, idLlamada);
				imp.sincronizarEnvio(organismoEmisor, 
									 identificador, 
									 tipoEntrega, 
									 modoNotificacion, 
									 estado, 
									 fechaEstado, 
									 receptor, 
									 acusePDF, 
									 acuseXML, 
									 opcionesSincronizarEnvio, 
									 codigoRespuesta, 
									 descripcionRespuesta, 
									 opcionesResultadoSincronizarEnvio
									 );
			} else {
				/*codigoRespuesta.value="999";
				descripcionRespuesta.value="Petición SOAP incorrecta";*/
				throw new AdviserException("Error en seguridad del mensaje. No se puede continuar.");
			}
			return;
		}
		catch (AdviserException e){
			if (log!=null)
			{	
				log.error("Error en endpoint de Adviser:" + e.getMessage());
			}

			throw new WebServiceException ("Error en Adviser:"+ e.getMessage());
		}
		catch (Exception e)
		{
			if (log!=null)
			{	
				log.error("Error no controlado en endpoint de Adviser:" + e.getMessage());
				log.trace(e.getStackTrace());
			}

			throw new WebServiceException ("Error en Adviser.");
		}
		finally{
			if (log!=null){
				log.info("Salida de operación de sincronizarEnvio");
			}
		}
	}

}
