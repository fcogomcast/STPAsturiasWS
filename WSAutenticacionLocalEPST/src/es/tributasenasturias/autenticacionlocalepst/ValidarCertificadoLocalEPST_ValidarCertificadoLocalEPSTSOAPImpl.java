package es.tributasenasturias.autenticacionlocalepst;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.handler.MessageContext;

import es.tributasenasturias.autenticacionlocalepst.business.Certificado;
import es.tributasenasturias.autenticacionlocalepst.exceptions.CertificadoException;
import es.tributasenasturias.autenticacionlocalepst.prefs.Preferencias;
import es.tributasenasturias.autenticacionlocalepst.prefs.PreferenciasException;
import es.tributasenasturias.autenticacionlocalepst.utils.Constantes;
import es.tributasenasturias.log.ILog;
import es.tributasenasturias.log.TributasLogger;

/**
 * This class was generated by the JAX-WS RI. Oracle JAX-WS 2.1.3-06/19/2008
 * 07:03 PM(bt) Generated source version: 2.1
 * 
 */
@WebService(portName = "ValidarCertificadoLocalEPSTSOAP", serviceName = "ValidarCertificadoLocalEPST", targetNamespace = "http://www.tributasenasturias.es/AutenticacionLocalEPST/", wsdlLocation = "/wsdls/AutenticacionLocalEPST.wsdl", endpointInterface = "es.tributasenasturias.autenticacionlocalepst.ValidarCertificadoLocalEPST")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
@HandlerChain(file="HandlerChain.xml")
public class ValidarCertificadoLocalEPST_ValidarCertificadoLocalEPSTSOAPImpl
		implements ValidarCertificadoLocalEPST {

	@Resource
	WebServiceContext wc;
	public ValidarCertificadoLocalEPST_ValidarCertificadoLocalEPSTSOAPImpl() {
	}

	/**
	 * 
	 * @param certificado
	 * @return returns
	 *         es.tributasenasturias.autenticacionlocalepst.ResultadoType
	 */
	public ResultadoType validar(String certificado) {
		MessageContext m= wc.getMessageContext();
		Preferencias pref;
		ILog logger=null;
		String idSesion="Sesión desconocida";
		try {
			if (m.containsKey(Constantes.PREFERENCIAS)){
				pref= (Preferencias) m.get(Constantes.PREFERENCIAS);
			} else {
				pref= new Preferencias();
			}
			if (m.containsKey(Constantes.IDSESION)) {
				idSesion= (String) m.get(Constantes.IDSESION);
			}
			if (m.containsKey(Constantes.LOG)) {
				logger= (ILog) m.get(Constantes.LOG);
			} else {
				logger = new TributasLogger(pref.getModoLog(),pref.getFicheroLogAplicacion(), idSesion); 
			}
			Certificado work= new Certificado(pref, logger, idSesion);
			return work.getDatosCertificado(certificado);
		} catch (PreferenciasException pe){
			System.out.println ("ValidarCertificadoEpst: Error en preferencias : "+ pe.getMessage());
			pe.printStackTrace(System.err);
			throw new WebServiceException ("Error en parametrización: " + pe.getMessage(),pe);
		} catch (CertificadoException c){
			if (logger!=null) {
				logger.error("Error en la ejecución del servicio :"+ c.getMessage() , c);
			}
			else {
				System.out.println ("ValidarCertificadoLocalEpst: Error :"+ c.getMessage());
				c.printStackTrace(System.out);
			}
			throw new WebServiceException("Error en la ejecución del servicio:"+ c.getMessage(),c);
		}
	}

}
